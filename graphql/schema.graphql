"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-05-23 13:43:32`."
scalar DateTime
    @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

type Query {
    "List multiple vehicles"
    vehicles: [Vehicle!] @all @guard(with: ["api"])
    "Find a single vehicle by id or registrationNumber"
    vehicle(id: ID @eq, registrationNumber: Int @eq): Vehicle!
        @find
        @guard(with: ["api"])

    "List multiple issues"
    issues: [Issue!] @all @guard(with: ["api"])
    "Find a single issue by id or reference"
    issue(id: ID @eq, reference: Int @eq): Issue! @find @guard(with: ["api"])

    "List multiple repairs"
    repairs: [Repair!] @all @guard(with: ["api"])
    "Find a single repair by id"
    repair(id: ID @eq): Repair! @find @guard(with: ["api"])
}

type Mutation {
    "Create new vehicle"
    createVehicle(input: createVehicleInput! @spread): Vehicle! @create
    "Update specified vehicle by id"
    updateVehicle(input: updateVehicleInput! @spread): Vehicle! @update
    "Delete specified vehicle by id"
    deleteVehicle(id: ID!): Vehicle! @delete

    "Create new issue"
    createIssue(input: createIssueInput! @spread): Issue! @create
    "Update specified issue by id"
    updateIssue(input: updateIssueInput! @spread): Issue! @update
    "Delete specified issue by id"
    deleteIssue(id: ID!): Issue! @delete

    "Create new repair"
    createRepair(input: createRepairInput! @spread): Repair! @create
    "Update specified repair by id"
    updateRepair(input: updateRepairInput! @spread): Repair! @update
    "Delete specified repair by id"
    deleteRepair(id: ID!): Repair! @delete

    "User login"
    login(input: LoginInput @spread): AuthPayload!
        @field(
            resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\Login@resolve"
        )
        
    "Refresh user token"
    refreshToken(input: RefreshTokenInput @spread): RefreshTokenPayload!
        @field(
            resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\RefreshToken@resolve"
        )

    "User logout"
    logout: LogoutResponse!
        @field(
            resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\Logout@resolve"
        )

    "Register new user"
    register(input: RegisterInput @spread): RegisterResponse!
        @field(
            resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\Register@resolve"
        )

    "Update user password"
    updatePassword(input: UpdatePassword! @spread): UpdatePasswordResponse!
        @field(
            resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\UpdatePassword@resolve"
        )
        @guard(with: ["api"])
}

#import models/*.graphql
