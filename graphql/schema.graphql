"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-05-23 13:43:32`."
scalar DateTime
    @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

type Query {
    "List multiple vehicles"
    vehicles: [Vehicle!] @all
    "Find a single vehicle by id or registrationNumber"
    vehicle(id: ID @eq, registrationNumber: Int @eq): Vehicle! @find

    "List multiple issues"
    issues: [Issue!] @all
    "Find a single issue by id or reference"
    issue(id: ID @eq, reference: Int @eq): Issue! @find

    "List multiple repairs"
    repairs: [Repair!] @all
    "Find a single repair by id"
    repair(id: ID @eq): Repair! @find
}

type Mutation {
    "Create new vehicle"
    createVehicle(input: createVehicleInput! @spread): Vehicle! @create
    "Update specified vehicle by id"
    updateVehicle(input: updateVehicleInput! @spread): Vehicle! @update
    "Delete specified vehicle by id"
    deleteVehicle(id: ID!): Vehicle! @delete

    "Create new issue"
    createIssue(input: createIssueInput! @spread): Issue! @create
    "Update specified issue by id"
    updateIssue(input: updateIssueInput! @spread): Issue! @update
    "Delete specified issue by id"
    deleteIssue(id: ID!): Issue! @delete

    "Create new repair"
    createRepair(input: createRepairInput! @spread): Repair! @create
    "Update specified repair by id"
    updateRepair(input: updateRepairInput! @spread): Repair! @update
    "Delete specified repair by id"
    deleteRepair(id: ID!): Repair! @delete
}

"Transmission type enum"
enum transmissionType {
    Manual @enum(value: Manual)
    SemiAutomatic @enum(value: SemiAutomatic)
    Automatic @enum(value: Automatic)
}

"Consumption type enum"
enum consumptionType {
    Fuel @enum(value: Fuel)
    Electric @enum(value: Electric)
    Hybrid @enum(value: Hybrid)
}

"Vehicle Type"
type Vehicle {
    id: ID!
    registrationNumber: Int!
    make: String!
    model: String!
    type: String!
    consumptionType: consumptionType!
    transmissionType: transmissionType!
    purchaseDate: DateTime!
    issues: [Issue!]! @hasMany
}

"Create vehicle input"
input createVehicleInput {
    registrationNumber: Int!
        @rules(apply: ["required", "unique:vehicles,registrationNumber"])
    make: String!
    model: String!
    type: String!
    consumptionType: consumptionType!
    transmissionType: transmissionType!
    purchaseDate: DateTime!
}

"Update vehicle input"
input updateVehicleInput {
    id: ID!
    registrationNumber: Int
        @rules(apply: ["unique:vehicles,registrationNumber"])
    make: String
    model: String
    type: String
    consumptionType: consumptionType
    transmissionType: transmissionType
    purchaseDate: DateTime
}

"Issue type"
type Issue {
    id: ID!
    reference: Int!
    issueDate: DateTime! @rules(apply: ["required"])
    summary: String!
    description: String!
    vehicle: Vehicle @belongsTo
    repair: Repair @hasOne
}

"Create issue input"
input createIssueInput {
    reference: Int! @rules(apply: ["required", "unique:issues,reference"])
    issueDate: DateTime! @rules(apply: ["required"])
    summary: String!
    description: String!
    vehicle_id: Int!
}

"Update issue input"
input updateIssueInput {
    id: ID!
    reference: Int @rules(apply: ["unique:issues,reference"])
    issueDate: DateTime
    summary: String
    description: String
    vehicle_id: Int
}

"Repair type"
type Repair {
    id: ID!
    repairDate: DateTime!
    summary: String!
    details: String!
    cost: Float!
    issue: Issue! @belongsTo
}

"Create repair input"
input createRepairInput {
    repairDate: DateTime! @rules(apply: ["required"])
    summary: String!
    details: String!
    cost: Float!
    issue_id: Int! 
}

"Update repair input"
input updateRepairInput {
    id: ID!
    repairDate: DateTime
    summary: String
    details: String
    cost: Float
    issue_id: Int
}